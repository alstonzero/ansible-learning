# 变量

变量名应该由字母、数字、下划线组成，变量名需要以字母开头，ansible内置的关键字不能作为变量名。

## 1.playbook中定义变量

如果我们想要在某个play中定义变量，可以借助vars关键字，示例如下

```yaml
---
- hosts: web_servers
  vars:
    testvar1: testfile
  remote_user: root
  tasks:
  - name: task1
    file:
      path: /testdir/{{ testvar1 }}
      state: touch
```

上例中，先使用`vars`关键字，表示在当前play中进行变量的相关设置。

`vars`关键字的下一级定义了一个变量，变量名为testvar1，变量值为testfile

当我们需要使用testvar1的变量值时，则需要引用这个变量，如你所见，使用**"{{变量名}}"**可以引用对应的变量。

也可以定义多个变量，示例如下。

```yaml
vars:
  testvar1: testfile
  testvar2: testfile2
```

除了使用上述语法，使用YAML的块序列语法也可以定义变量，示例如下

```yaml
vars:
  - testvar1: testfile
  - testvar2: testfile2
```

在定义变量时，还能够以类似"属性"的方式定义变量，示例如下

```yaml
---
- hosts: web_servers
  remote_user: root
  vars:
    nginx:
      conf80: /etc/nginx/conf.d/80.conf
      conf8080: /etc/nginx/conf.d/8080.conf
  tasks:
  - name: task1
    file:
      path: "{{nginx.conf80}}"
      state: touch
  - name: task2
    file:
      path: "{{nginx.conf8080}}"
      state: touch
```

如上例所示，我定义了两个变量，两个变量的值对应两个nginx配置文件路径

```yaml
vars:
  nginx:
    conf80: /etc/nginx/conf.d/80.conf
    conf8080: /etc/nginx/conf.d/8080.conf
```

当我们需要引用这两个变量时，有两种语法可用

- 语法一

```
"{{nginx.conf80}}"
```

- 语法二

```
"{{nginx['conf8080']}}"
```

这样使用变量在逻辑上比较清晰，可以看出conf80与conf8080都属于nginx相关的配置。

#### 使用双引号

上例中，我在引用变量时使用了双引号，而在本文的第一个示例中(`path: /testdir/{{ testvar1 }}`)引用变量时却没有使用双引号，这是因为，第一个示例中的变量在被引用时，并没有处于"开头的位置" 当file模块的path参数引用对应的变量时，先写入了'/testdir/'，然后才引用了"testvar1"变量，{{ testvar1 }}并没有处于"开头的位置"，换句话说就是，{{ testvar1 }}前面还有字符串'/testdir/'

而在上述后面的示例中引用变量时，变量被引用时如下，处于"开头的位置"

`path: "{{nginx.conf80}}"`

这种情况下，我们引用变量时必须使用双引号引起被引用的变量，否则会报语法错误。



#### 其实，上述情况也有例外

前文中有描述过，当在playbook中为模块的参数赋值时，可以使用"冒号"，也可以使用"等号"，当使用"等号"为模块的参数赋值时，则不用考虑引用变量时是否使用"引号"的问题，示例如下

```yaml
---
- hosts: web_servers
  remote_user: root
  vars:
    nginx:
      conf80: /etc/nginx/conf.d/80.conf
      conf8080: /etc/nginx/conf.d/8080.conf
  tasks:
  - name: task1
    file:
      path={{nginx.conf80}}
      state=touch
  - name: task2
    file:
      path={{nginx['conf8080']}}
      state=touch
```

### 在某个文件中定义变量

除了能够在playbook中直接定义变量，我们还可以在某个文件中定义变量，然后再在playbook中引入对应的文件，引入文件后，playbook

即可使用文件中定义的变量，你可能会问，为什么要多此一举呢？这是因为在某些工作场景中这样做很有用，比如，你想要让别人阅读你的playbook，却不想让别人看到某些值，可以使用这种办法，因为别人在阅读playbook时，只能看到引入的变量名，但是看不到变量对应的值，这种将变量分离到某个文件中的做法叫做"变量文件分离"，"变量文件分离"除了能够隐藏某些值，还能够让你将不同类的信息放在不同的文件中，并且让这些信息与剧本主体分开。



先来看看"变量文件分离"的一些小例子

首先，我们来定义一个专门用来存放nginx相关变量的文件（文件名为nginx_vars.yml），在文件中定义变量时，不要使用vars关键字，直接定义变量即可，定义变量的语法与在playbook中定义变量的几种语法相同

```
语法一示例：
  testvar1: testfile
  testvar2: testfile2
语法二示例：
  - testvar1: testfile
  - testvar2: testfile2
语法三示例：
nginx:
  conf80: /etc/nginx/conf.d/80.conf
  conf8080: /etc/nginx/conf.d/8080.conf
 
```

如下所示，直接在nginx_vars.yml文件中定义变量即可。

```yaml
# cat nginx_vars.yml
nginx:
  conf80: /etc/nginx/conf.d/80.conf
  conf8080: /etc/nginx/conf.d/8080.conf
```

在nginx_vars.yml中定义完相关变量后，即可在playbook中引入文件中的变量，在playbook中引入包含变量的文件时，需要使用"vars_files"关键字，被引入的文件需要以"- "开头，以YAML中块序列的语法引入，示例如下

```yaml
---
- hosts: web_servers
  remote_user: root
  vars_files:
  - /testdir/ansible/nginx_vars.yml
  tasks:
  - name: task1
    file:
      path={{nignx.conf80}}
      state=touch
   - name: task2
     file:
       path={{nignx['conf8080']}}
       state=touch
```

上例中使用`vars_files`关键字引入了对应的变量文件，然后使用了文件中定义的变量。

上例中`vars_files`关键字只引入了一个变量文件，也可以引入多个变量文件，每个被引入的文件都需要以`- `开头，示例如下

```yaml
vars_files:
  - /testdir/ansible/nginx_vars.yml
  - /testdir/ansible/other_vars.yml
```

`vars`关键字和`vars_files`关键字可以同时使用，如下

```yaml
vars:
- conf90: /etc/nginx/conf.d/90.conf
vars_files:
- /testdir/ansible/nginx_vars.yml
```
